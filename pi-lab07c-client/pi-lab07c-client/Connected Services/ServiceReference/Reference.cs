//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pi_lab07c_client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contacts", Namespace="http://schemas.datacontract.org/2004/07/pi_lab07c.Models")]
    [System.SerializableAttribute()]
    public partial class Contacts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int idk__BackingFieldField;
        
        private string namek__BackingFieldField;
        
        private string numberk__BackingFieldField;

        public Contacts(string name, string number)
        {
            this.namek__BackingField = name;
            this.numberk__BackingField = number;
        }

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<id>k__BackingField", IsRequired=true)]
        public int idk__BackingField {
            get {
                return this.idk__BackingFieldField;
            }
            set {
                if ((this.idk__BackingFieldField.Equals(value) != true)) {
                    this.idk__BackingFieldField = value;
                    this.RaisePropertyChanged("idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<name>k__BackingField", IsRequired=true)]
        public string namek__BackingField {
            get {
                return this.namek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.namek__BackingFieldField, value) != true)) {
                    this.namek__BackingFieldField = value;
                    this.RaisePropertyChanged("namek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<number>k__BackingField", IsRequired=true)]
        public string numberk__BackingField {
            get {
                return this.numberk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.numberk__BackingFieldField, value) != true)) {
                    this.numberk__BackingFieldField = value;
                    this.RaisePropertyChanged("numberk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IContactService")]
    public interface IContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetDict", ReplyAction="http://tempuri.org/IContactService/GetDictResponse")]
        pi_lab07c_client.ServiceReference.Contacts[] GetDict();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/GetDict", ReplyAction="http://tempuri.org/IContactService/GetDictResponse")]
        System.Threading.Tasks.Task<pi_lab07c_client.ServiceReference.Contacts[]> GetDictAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddDict", ReplyAction="http://tempuri.org/IContactService/AddDictResponse")]
        void AddDict(pi_lab07c_client.ServiceReference.Contacts contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddDict", ReplyAction="http://tempuri.org/IContactService/AddDictResponse")]
        System.Threading.Tasks.Task AddDictAsync(pi_lab07c_client.ServiceReference.Contacts contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdDict", ReplyAction="http://tempuri.org/IContactService/UpdDictResponse")]
        void UpdDict(int id, pi_lab07c_client.ServiceReference.Contacts contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/UpdDict", ReplyAction="http://tempuri.org/IContactService/UpdDictResponse")]
        System.Threading.Tasks.Task UpdDictAsync(int id, pi_lab07c_client.ServiceReference.Contacts contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DelDict", ReplyAction="http://tempuri.org/IContactService/DelDictResponse")]
        void DelDict(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DelDict", ReplyAction="http://tempuri.org/IContactService/DelDictResponse")]
        System.Threading.Tasks.Task DelDictAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceChannel : pi_lab07c_client.ServiceReference.IContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.ClientBase<pi_lab07c_client.ServiceReference.IContactService>, pi_lab07c_client.ServiceReference.IContactService {
        
        public ContactServiceClient() {
        }
        
        public ContactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public pi_lab07c_client.ServiceReference.Contacts[] GetDict() {
            return base.Channel.GetDict();
        }
        
        public System.Threading.Tasks.Task<pi_lab07c_client.ServiceReference.Contacts[]> GetDictAsync() {
            return base.Channel.GetDictAsync();
        }
        
        public void AddDict(pi_lab07c_client.ServiceReference.Contacts contact) {
            base.Channel.AddDict(contact);
        }
        
        public System.Threading.Tasks.Task AddDictAsync(pi_lab07c_client.ServiceReference.Contacts contact) {
            return base.Channel.AddDictAsync(contact);
        }
        
        public void UpdDict(int id, pi_lab07c_client.ServiceReference.Contacts contact) {
            base.Channel.UpdDict(id, contact);
        }
        
        public System.Threading.Tasks.Task UpdDictAsync(int id, pi_lab07c_client.ServiceReference.Contacts contact) {
            return base.Channel.UpdDictAsync(id, contact);
        }
        
        public void DelDict(int id) {
            base.Channel.DelDict(id);
        }
        
        public System.Threading.Tasks.Task DelDictAsync(int id) {
            return base.Channel.DelDictAsync(id);
        }
    }
}
